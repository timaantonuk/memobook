import {collection, addDoc, getDocs, where, query, doc, deleteDoc, updateDoc} from "firebase/firestore";
import { db } from "@/app/firebaseConfig";

export interface Card {
    id: string; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
    title: string; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    description: string; // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    categoryId: string; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∞
    photoUrl?: string; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    userId: string; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∞
    createdAt: string; // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    nextReview: string; // –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    stepOfRepetition: number; // –¢–µ–∫—É—â–∏–π —à–∞–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Spaced Repetition
    status: "learning" | "learned"; // –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏
}

export async function fetchUserCards(userId: string) {
    if (!userId) return [];

    try {
        const q = query(collection(db, "cards"), where("userId", "==", userId));
        const querySnapshot = await getDocs(q);

        return querySnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
            // üõ† –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
            categoryId: doc.data().categoryId || null,
        }));
    } catch (error) {
        console.error("Error fetching user cards:", error);
        return [];
    }
}

export async function createCard(cardData: {
    title: string;
    description: string;
    stepOfRepetition: 0,
    categoryId: string;
    photoUrl?: string;
    userId: string;
    status: "learning";
}) {
    try {
        const docRef = await addDoc(collection(db, "cards"), {
            ...cardData,
            createdAt: new Date().toISOString(),
            nextReview: new Date().toISOString(), // –î–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        });

        return { id: docRef.id, ...cardData };
    } catch (error) {
        console.error("Error creating card:", error);
        throw error;
    }
}

export async function deleteCard(cardId: string) {
    try {
        await deleteDoc(doc(db, "cards", cardId));
    } catch (error) {
        console.error("Error deleting card:", error);
    }
}

export async function updateCardInFirebase(cardId: string, updates: Partial<Card>) {
    try {
        const cardRef = doc(db, "cards", cardId);
        await updateDoc(cardRef, updates);
        console.log("Card updated in Firebase:", updates);
    } catch (error) {
        console.error("Error updating card in Firebase:", error);
    }
}