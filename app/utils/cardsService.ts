import {collection, addDoc, getDocs, where, query, doc, deleteDoc, updateDoc} from "firebase/firestore";
import {db} from "@/app/firebaseConfig";
import {format, isBefore} from "date-fns";

export interface Card {
    id: string;
    title: string;
    description: string;
    categoryId: string;
    photoUrl?: string;
    userId: string;
    createdAt: string;
    nextReview: string;
    stepOfRepetition: number;
    status: "learning" | "learned";
}

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
export async function createCard(cardData: Omit<Card, "id" | "createdAt" | "nextReview">) {
    try {
        const createdAt = new Date().toISOString();
        const nextReview = new Date().toISOString();

        const docRef = await addDoc(collection(db, "cards"), {
            ...cardData,
            createdAt,
            nextReview
        });

        return {id: docRef.id, ...cardData, createdAt, nextReview};
    } catch (error) {
        console.error("‚ùå Error creating card:", error);
        throw error;
    }
}

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
export async function deleteCard(cardId: string) {
    try {
        await deleteDoc(doc(db, "cards", cardId));
    } catch (error) {
        console.error("‚ùå Error deleting card:", error);
    }
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
export async function updateCardInFirebase(cardId: string, updates: Partial<Card>) {
    try {
        const cardRef = doc(db, "cards", cardId);

        if (updates.nextReview === undefined) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: nextReview –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${cardId}`);
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ nextReview –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        }

        await updateDoc(cardRef, updates);
        console.log("‚úÖ Card updated in Firebase:", updates);
    } catch (error) {
        console.error("‚ùå Error updating card in Firebase:", error);
    }
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export async function fetchUserCards(userId: string) {
    if (!userId) return [];

    try {
        const q = query(collection(db, "cards"), where("userId", "==", userId));
        const querySnapshot = await getDocs(q);

        console.log("üî• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", querySnapshot.docs.map(doc => doc.data()));

        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const filteredCards = querySnapshot.docs
            .map((doc) => {
                const data = doc.data();
                return {
                    id: doc.id,
                    ...data,
                    nextReview: data.nextReview ? new Date(data.nextReview) : null,
                };
            })
            .filter((card) => {
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${card.id}:`, {
                    nextReview: card.nextReview,
                    nextReviewTimestamp: card.nextReview ? card.nextReview.getTime() : "null",
                    todayTimestamp: today.getTime()
                });

                if (card.status === "learned") return false; // ‚úÖ –£–±–∏—Ä–∞–µ–º –≤—ã—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                if (!card.nextReview) return true; // ‚úÖ –ï—Å–ª–∏ –Ω–µ—Ç nextReview, –æ—Å—Ç–∞–≤–ª—è–µ–º

                // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º, –µ—Å–ª–∏ nextReview —Å–µ–≥–æ–¥–Ω—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
                const nextReviewDate = new Date(card.nextReview);
                nextReviewDate.setHours(0, 0, 0, 0);

                return nextReviewDate.getTime() <= today.getTime();
            });

        console.log("üî• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", filteredCards);
        return filteredCards;
    } catch (error) {
        console.error("‚ùå Error fetching user cards:", error);
        return [];
    }
}