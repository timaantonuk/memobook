"use client"
import { create } from "zustand"
import { devtools } from "zustand/middleware"
import { useCategoryStore } from "./categories-store"

interface Card {
    id: string
    title: string
    description: string
    categoryId: string
    photoUrl?: string
    userId: string
    createdAt: string
    stepOfRepetition: number
    status: "learning" | "learned"
    nextReview: string | null
}

interface CardState {
    cards: Card[]
    selectedCategoryId: string | null
    filteredCards: Card[]
    setCards: (cards: Card[]) => void
    addCard: (card: Card) => void
    setSelectedCategory: (categoryId: string | null) => void
    updateCard: (id: string, updates: Partial<Card>) => void
    removeCard: (id: string) => void
    removeCardsByCategory: (categoryId: string) => void
}

export const useCardStore = create<CardState>()(
    devtools((set, get) => ({
        cards: [],
        selectedCategoryId: null,
        filteredCards: [],

        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Å—Ä–∞–∑—É —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
        setCards: (cards) => {
            const selectedCategoryId = get().selectedCategoryId
            const filtered = selectedCategoryId ? cards.filter((card) => card.categoryId === selectedCategoryId) : cards

            set({
                cards,
                filteredCards: filtered,
            })
        },

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º filteredCards
        addCard: (card) => {
            set((state) => {
                const updatedCards = [...state.cards, card]
                const filtered = state.selectedCategoryId
                    ? updatedCards.filter((c) => c.categoryId === state.selectedCategoryId)
                    : updatedCards

                return {
                    cards: updatedCards,
                    filteredCards: filtered,
                }
            })
        },

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º filteredCards
        updateCard: (id, updates) => {
            set((state) => {
                const updatedCards = state.cards.map((card) =>
                    card.id === id ? { ...card, ...updates } : card
                );

                return {
                    cards: updatedCards,
                    filteredCards: state.selectedCategoryId
                        ? updatedCards.filter((c) => c.categoryId === state.selectedCategoryId)
                        : updatedCards,
                };
            });

            setTimeout(() => {
                set((state) => ({ cards: [...state.cards] })); // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            }, 50);
        },

        // ‚úÖ –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        removeCard: (id) => {
            set((state) => {
                const updatedCards = state.cards.filter((card) => card.id !== id);
                return {
                    cards: updatedCards,
                    filteredCards: state.selectedCategoryId
                        ? updatedCards.filter((card) => card.categoryId === state.selectedCategoryId)
                        : updatedCards, // üî• –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                };
            });
        },



        // ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        removeCardsByCategory: (categoryId) => {
            set((state) => ({
                cards: state.cards.filter((card) => card.categoryId !== categoryId),
                filteredCards: state.filteredCards.filter((card) => card.categoryId !== categoryId),
            }))
        },



        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        setSelectedCategory: (categoryId) => {
            const allCards = get().cards // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            const filtered = categoryId ? allCards.filter((card) => card.categoryId === categoryId) : allCards // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "All Cards", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ

            console.log("üìÇ setSelectedCategory –≤—ã–∑–≤–∞–Ω —Å:", categoryId)
            console.log("üÉè –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π:", allCards)
            console.log("üîç –ù–æ–≤—ã–µ filteredCards:", filtered)

            set(
                () => ({
                    selectedCategoryId: categoryId,
                    filteredCards: [...filtered], // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
                }),
                false,
                "Selected category updated",
            )

            // –û–±–Ω–æ–≤–ª—è–µ–º selectedCategoryId –≤ categories-store
            useCategoryStore.getState().setSelectedCategory(categoryId)
        },
    })),
)

